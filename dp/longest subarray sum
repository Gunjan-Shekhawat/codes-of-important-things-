*********************************************************************************************************************************************************************************
https://practice.geeksforgeeks.org/problems/longest-subarray-with-sum-divisible-by-k/0
*********************************************************************************************************************************************************************************
// the idea is simple , we make one array which contains modulus of sum /k upto that index 
while traversing this modulus  if we encounter same modulus again it measn that sum excluding intial modulo is divisible by k as we are getting same moduolo again so we just add that to our ans 
*********************************************************************************************************************************************************************************
#include <bits/stdc++.h>
using namespace std;

int main() {
	//code
	int t;
	cin>>t;
	while(t--){
	    int n,k;
	    cin>>n>>k;
	    vector<int>arr(n);
	    for(int i=0;i<n;i++){
	        cin>>arr[i];
	    }
	    unordered_map<int, int> um; 
      
    // 'mod_arr[i]' stores (sum[0..i] % k) 
    int mod_arr[n], max = 0; 
    int curr_sum = 0; 
      
    // traverse arr[] and build up the 
    // array 'mod_arr[]' 
    for (int i = 0; i < n; i++) 
    { 
        curr_sum += arr[i]; 
          
        // as the sum can be negative, taking modulo twice 
        mod_arr[i] = ((curr_sum % k) + k) % k;         
    }     
      
    for (int i = 0; i < n; i++) 
    { 
        // if true then sum(0..i) is divisible 
        // by k 
        if (mod_arr[i] == 0) 
            // update 'max' 
            max = i + 1; 
          
        // if value 'mod_arr[i]' not present in 'um' 
        // then store it in 'um' with index of its 
        // first occurrence         
        else if (um.find(mod_arr[i]) == um.end()) 
            um[mod_arr[i]] = i; 
              
        else
            // if true, then update 'max' 
            if (max < (i - um[mod_arr[i]])) 
                max = i - um[mod_arr[i]];             
    } 
	    cout<<max<<endl;
	}
	return 0;
}
*********************************************************************************************************************************************************************************
