https://www.geeksforgeeks.org/minimum-number-jumps-reach-endset-2on-solution/



* Given an array of non negative integers where each element represents the max 
 * number of steps that can be made forward from that element. Write a function to 
 * return the minimum number of jumps to reach the end of the array from first element
 * 
 * Solution 
 * Have 2 for loop. j trails i. If arr[j] + j >= i then you calculate new jump
 * and result.
 * 
 * Space complexity O(n) to maintain result and min jumps
 * Time complexity O(n^2)
 * 
 * Reference
 * http://www.geeksforgeeks.org/minimum-number-of-jumps-to-reach-end-of-a-given-array/
 */
public class MinJumpToReachEnd {

    public int minJump(int arr[],int result[]){
        
        int []jump = new int[arr.length];
        jump[0] = 0;
        for(int i=1; i < arr.length ; i++){
            jump[i] = Integer.MAX_VALUE-1;
        }
        
        for(int i=1; i < arr.length; i++){
            for(int j=0; j < i; j++){
                if(arr[j] + j >= i){
                    if(jump[i] > jump[j] + 1){
                        result[i] = j;
                        jump[i] = jump[j] + 1;
                    }
                }
            }
        }
        
        return jump[jump.length-1];
    }
////this is efficient method 
int Solution::jump(vector<int> &A) {
    int s=A.size();
    bool poss=false;
    
    if(s<=1)
        return 0;
    
    if(A[0]==0)
        return -1;
    else if(A[0]>=s-1)
        return 1;
    
    int i=1,j=A[0];
    int temp=0;
    int jumps=1;
    
    while(i<s){
        temp=0;
        while(i<=j && i<s){
            if(A[i]+i>=temp){
                temp=i+A[i];
            }
            i++;
        }
        jumps++;
        if(temp==j)
            return -1;
        else if(temp>=s-1)
            return jumps;
        i = j+1;
        j=temp;
    }
}
