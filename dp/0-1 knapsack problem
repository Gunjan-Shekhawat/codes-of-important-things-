
            
In the Dynamic programming we will work considering the same cases as mentioned in the recursive approach. In a DP[][] table let’s consider all the possible weights from ‘1’ to ‘W’ as the columns and weights that can be kept as the rows.
The state DP[i][j] will denote maximum value of ‘j-weight’ considering all values from ‘1 to ith’. So if we consider ‘wi’ (weight in ‘ith’ row) we can fill it in all columns which have ‘weight values > wi’. Now two possibilities can take place:

Fill ‘wi’ in the given column.
Do not fill ‘wi’ in the given column.
Now we have to take a maximum of these two possibilities, formally if we do not fill ‘ith’ weight in ‘jth’ column then DP[i][j] state will be same as DP[i-1][j] but if we fill the weight, DP[i][j] will be equal to the value of ‘wi’+ value of the column weighing ‘j-wi’ in the previous row. So we take the maximum of these two possibilities to fill the current state. This visualization will make the concept clear:


             ll n,w;
            cin>>n>>w;
            vector<int>val(n);
            vector<int>wt(n);
            for(ll i=0;i<n;i++){
                cin>>val[i];
            }
            for(ll i=0;i<n;i++){
                cin>>wt[i];
            }
            int dp[n+1][w+1];
            for(int i=0;i<=n;i++){
                for(int j=0;j<=w;j++){
                    if(i==0 || j==0){
                        dp[i][j]=0;
                    }
                    else if(wt[i-1]<=j){
                        dp[i][j]=max(dp[i-1][j],val[i-1]+dp[i-1][j-wt[i-1]]);
                    }
                    else{
                        dp[i][j]=dp[i-1][j];
                    }
                }
            }
            
