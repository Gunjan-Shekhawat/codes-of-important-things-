*********************************************************************************************************************************************************************************
// the idea here is simple , we will check for every vertice if it is visited of not and is equal to X or not ,  then we will push its adjacent to queue and when queue becomes empty then we will get a connected component .
*********************************************************************************************************************************************************************************
https://practice.geeksforgeeks.org/problems/x-total-shapes/0
*********************************************************************************************************************************************************************************
#include <bits/stdc++.h>
using namespace std;

int main() {
	//code
	int t;
	cin>>t;
	while(t--){
	    int n,m;
	    cin>>n>>m;
	    vector<string>a;
	    vector<bool>visited[n];
	    int x,y;
	    string d;
	    int c=0;
	    for(int i=0;i<n;i++){
	            cin>>d;
	            a.push_back(d);
	    }
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++){
	            visited[i].push_back(0);
	        }
	    }
	    int count = 0;
	    queue<pair<int,int> >q;
	  
	int ans =0;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(!visited[i][j] && a[i][j]=='X'){
                q.push({i,j});
	            visited[i][j]=true;
                ans++;
	            while(!q.empty()){
        	        pair<int,int>p=q.front();
        	        q.pop();
        	        int x = p.first;
        	        int y = p.second;
        	        if(x+1<n){
        	            if(!visited[x+1][y] && a[x+1][y]=='X'){
        	                q.push({x+1,y});
        	                visited[x+1][y]= true;
        	            }
        	        }
        	        if(x-1>=0){
        	            if(!visited[x-1][y] && a[x-1][y]=='X'){
        	                q.push({x-1,y});
        	                visited[x-1][y]= true;
        	            }
        	        }
        	        if(y+1<m){
        	            if(!visited[x][y+1] && a[x][y+1]=='X'){
        	                q.push({x,y+1});
        	                visited[x][y+1]= true;
        	            }
        	        }
        	        if(y-1>=0){
        	            if(!visited[x][y-1] && a[x][y-1]=='X'){
        	                q.push({x,y-1});
        	                visited[x][y-1]= true;
        	            }
        	        }
	            }
	        }
	     }
	  }
	  cout<<ans<<endl;
	    
	}
}
*********************************************************************************************************************************************************************************
