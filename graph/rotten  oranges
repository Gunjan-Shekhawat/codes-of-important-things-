*********************************************************************************************************************************************************************************
// the idea is simplee , first we will push all cells containing 2 into our queue and give them level 1, then  we traverse the queue and we push their adjacent if they are 1 into the queue , and rott them.
then we gave it level = level of its parent +1;
and we kept count of 1's in starting , if at last no of 1s are not zero we return -1 as all were not rotted 
else 
we will find max level 
*********************************************************************************************************************************************************************************
https://practice.geeksforgeeks.org/problems/rotten-oranges/0
*********************************************************************************************************************************************************************************
#include <bits/stdc++.h>
using namespace std;

int main() {
	int t;
	cin>>t;
	while(t--){
	    int n,m;
	    cin>>n>>m;
	    int level[n][m];
	    int visited[n][m];
	    int x;
	    queue<pair<int,int> >q;
	    int arr[n][m];
	    int one_count=0;
	    for(int i=0;i<n;i++){
	        for(int j=0;j<m;j++){
	            cin>>arr[i][j];
	            if(arr[i][j]==1){
	                one_count++;
	            }
	            visited[i][j]=0;
	            if(arr[i][j]==2){
	                level[i][j]=0;
	                q.push({i,j});
	                visited[i][j]=1;
	            }
	        }
	    }
	    q.push({-1,-1});
	    int c=0;
	    int f=0;
	    while(!q.empty()){
	        pair<int,int>x= q.front();
	        q.pop();
	        int a=  x.first;
	        int b = x.second;
	        if(a==-1){
	            if(!q.empty()){
	                 q.push({-1,-1});
	            }
	            continue;
	           
	        }
	        if(a+1<n){
	            if(!visited[a+1][b] && arr[a+1][b]==1){
	                visited[a+1][b]=1;
	                q.push({a+1,b});
	                one_count--;
	                level[a+1][b]=level[a][b]+1;
	            }
	        }
	        if(a-1>=0){
	            if(!visited[a-1][b] && arr[a-1][b]==1){
	                one_count--;
	                visited[a-1][b]=1;
	                q.push({a-1,b});
	                level[a-1][b]=level[a][b]+1;
	            }
	        }
	        if(b-1>=0){
	            if(!visited[a][b-1] && arr[a][b-1]==1){
	                q.push({a,b-1});
	                visited[a][b-1]=1;
	                one_count--;
	                level[a][b-1]=level[a][b]+1;
	            }
	        }
	        if(b+1<m){
	            if(!visited[a][b+1] && arr[a][b+1]==1  ){
	                q.push({a,b+1});
	                visited[a][b+1]=1;
	                one_count--;
	                level[a][b+1]=level[a][b]+1;
	            }
	        }
	    }
	    if(one_count !=0){
	        cout<<-1<<endl;
	    }
	    else{
	        int max1=0;
	        for(int i=0;i<n;i++){
	            for(int j=0;j<m;j++){
	                if(arr[i][j]==1)
	                    max1=max(max1,level[i][j]);
	            }
	        }
	        cout<<max1<<endl;
	    }
	}
	
}
*********************************************************************************************************************************************************************************
