//  the idea is first sort using finfish time and before this strore the index of the activities and then find the non conflicting activities
https://practice.geeksforgeeks.org/problems/n-meetings-in-one-room/0


#include <bits/stdc++.h>
using namespace std;
#define ll long long int 

struct t{
   int start;
   int end;
};
bool cmp(pair<struct t,int>p1 ,pair<struct t,int>p2){
    return p2.second>p1.second;
}
int main() {
	//code
	ll t;
	cin>>t;
	while(t--){
	    ll n;
	    cin>>n;
	    vector<ll>a(n);
	    vector<ll>b(n);
	    vector<pair<struct t,int> >p(n);
	    for(ll i=0;i<n;i++){
	        cin>>a[i];
	    }
	    for(ll i=0;i<n;i++){
	        cin>>b[i];
	        struct t s1;
	        p[i].first.start=a[i];
	        p[i].first.end=i+1;
	        p[i].second=b[i];
	    }
	    sort(p.begin(),p.end(),cmp);
	    int c=1;
	    int prev = p[0].second;
	    cout<<p[0].first.end<<" ";
	    for(int i=1;i<n;i++){
	        if(p[i].first.start>prev){
	            cout<<p[i].first.end<<" ";
	            prev=p[i].second;
	        }
	        
	    }
	    cout<<endl;
	}
	return 0;
}
