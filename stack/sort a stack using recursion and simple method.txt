************ques link****https://practice.geeksforgeeks.org/problems/sort-a-stack/1/?track=ppc-stack&batchId=221***********************


void sortedInsert(struct stack **s, int x)  
{  
    // Base case: Either stack is empty or newly inserted  
    // item is greater than top (more than all existing)  
    if (isEmpty(*s) or x > top(*s))  
    {  
        push(s, x);  
        return;  
    }  
  
    // If top is greater, remove the top item and recur  
    int temp = pop(s);  
    sortedInsert(s, x);  
  
    // Put back the top item removed earlier  
    push(s, temp);  
}  
  
// Function to sort stack  
void sortStack(struct stack **s)  
{  
    // If stack is not empty  
    if (!isEmpty(*s))  
    {  
        // Remove the top item  
        int x = pop(s);  
  
        // Sort remaining stack  
        sortStack(s);  
  
        // Push the top item back in sorted stack  
        sortedInsert(s, x);  
    }  
}  
  

///*******************************without recursion****************************
void SortedStack :: sort()
{
   //Your code here
   stack<int> s1;
   if(s1.empty()){
       s1.push(s.top());
       s.pop();
   }
   while(!s.empty()){
       int x = s.top();;
       s.pop();
       while(x < s1.top()){
           s.push(s1.top());
           s1.pop();
            if(s1.empty()){
               break;
           }
       }
       s1.push(x);
   }
   s =s1;
}

