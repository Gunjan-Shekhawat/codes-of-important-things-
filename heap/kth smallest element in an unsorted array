*********************************************************************************************************************************************************************************
/*K’th Smallest/Largest Element in Unsorted Array | Set 1
Given an array and a number k where k is smaller than size of array, we need to find the k’th smallest element in the given array. It is given that ll array elements are distinct.

Examples:

Input: arr[] = {7, 10, 4, 3, 20, 15}
k = 3
Output: 7

Input: arr[] = {7, 10, 4, 3, 20, 15}
k = 4
Output: 10
*/
*********************************************************************************************************************************************************************************
https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-2-expected-linear-time/

https://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-3-worst-case-linear-time/
*********************************************************************************************************************************************************************************
Method 3 (Using Max-Heap)
We can also use Max Heap for finding the k’th smallest element. Following is algorithm.
1) Build a Max-Heap MH of the first k elements (arr[0] to arr[k-1]) of the given array. O(k)

2) For each element, after the k’th element (arr[k] to arr[n-1]), compare it with root of MH.
……a) If the element is less than the root then make it root and call heapify for MH
……b) Else ignore it.
// The step 2 is O((n-k)*logk)

3) Finally, root of the MH is the kth smallest element.

Time complexity of this solution is O(k + (n-k)*Logk)
*********************************************************************************************************************************************************************************

MaxHeap::MaxHeap(int a[], int size) 
{ 
    heap_size = size; 
    harr = a; // store address of array 
    int i = (heap_size - 1) / 2; 
    while (i >= 0) { 
        maxHeapify(i); 
        i--; 
    } 
} 
  
// Method to remove maximum element (or root) from max heap 
int MaxHeap::extractMax() 
{ 
    if (heap_size == 0) 
        return INT_MAX; 
  
    // Store the maximum vakue. 
    int root = harr[0]; 
  
    // If there are more than 1 items, move the last item to root 
    // and call heapify. 
    if (heap_size > 1) { 
        harr[0] = harr[heap_size - 1]; 
        maxHeapify(0); 
    } 
    heap_size--; 
  
    return root; 
} 
  
// A recursive method to heapify a subtree with root at given index 
// This method assumes that the subtrees are already heapified 
void MaxHeap::maxHeapify(int i) 
{ 
    int l = left(i); 
    int r = right(i); 
    int largest = i; 
    if (l < heap_size && harr[l] > harr[i]) 
        largest = l; 
    if (r < heap_size && harr[r] > harr[largest]) 
        largest = r; 
    if (largest != i) { 
        swap(&harr[i], &harr[largest]); 
        maxHeapify(largest); 
    } 
} 
  
// A utility function to swap two elements 
void swap(int* x, int* y) 
{ 
    int temp = *x; 
    *x = *y; 
    *y = temp; 
} 
  
// Function to return k'th largest element in a given array 
int kthSmallest(int arr[], int n, int k) 
{ 
    // Build a heap of first k elements: O(k) time 
    MaxHeap mh(arr, k); 
  
    // Process remaining n-k elements.  If current element is 
    // smaller than root, replace root with current element 
    for (int i = k; i < n; i++) 
        if (arr[i] < mh.getMax()) 
            mh.replaceMax(arr[i]); 
  
    // Return root 
    return mh.getMax(); 
} 
*********************************************************************************************************************************************************************************
