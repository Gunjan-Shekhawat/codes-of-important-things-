class LRUCache {
    list<int>dq;
    unordered_map<int,pair<int,list<int>::iterator> >ma;
    int csize;
    
public:
    LRUCache(int capacity) {
        csize = capacity;
    }
    
    int get(int key) {
        if(ma.find(key) == ma.end()){
            return -1;
        }
        else{
            dq.erase(ma[key].second);
            dq.push_front(key);
             ma[key].second = dq.begin();
            return ma[key].first;
        }
    }
    
    void put(int key, int value) {
        if(ma.find(key) == ma.end()){
            if(dq.size() == csize){
                int last = dq.back();
                dq.pop_back();
                ma.erase(last);
            }
        }
        else{
            dq.erase(ma[key].second);
        }
        dq.push_front(key);
        ma[key]={value,dq.begin()};
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
