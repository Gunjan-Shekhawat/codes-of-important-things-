class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        
        unsigned int pow_set_size = pow(2, nums.size()); 
        int counter, j; 
        vector<vector<int> >v1;
        /*Run from counter 000..0 to 111..1*/
        for(counter = 0; counter < pow_set_size; counter++) 
        { 
            vector<int>v;
        for(j = 0; j < nums.size(); j++) 
        { 
            /* Check if jth bit in the counter is set 
                If set then print jth element from set */
            if(counter & (1 << j)) 
               v.push_back(nums[j]); 
        } 
        v1.push_back(v);
        }
        return v1;
    }
        
};






#METHOD 2 (CASCADING)
class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        output = [[]]
        
        for num in nums:
            output += [curr + [num] for curr in output]
        
        return output
        
        
        
        
        
        
        
        
        
        
        
  #MEHTHOD 3 (BACKTRACKING)
  
  class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        def backtrack(first = 0, curr = []):
            # if the combination is done
            if len(curr) == k:  
                output.append(curr[:])
            for i in range(first, n):
                # add nums[i] into the current combination
                curr.append(nums[i])
                # use next integers to complete the combination
                backtrack(i + 1, curr)
                # backtrack
                curr.pop()
        
        output = []
        n = len(nums)
        for k in range(n + 1):
            backtrack()
        return output
  
